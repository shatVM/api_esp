<html>
  <head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width,initial-scale=1" />
    <title>ESP32 Receiver</title>
    {{#if @root.isLocal}}
      <title>LOCAL</title>
    {{/if}}

    <link rel="stylesheet" href="/styles.css" />
    <link
      href="https://fonts.googleapis.com/css2?family=Fira+Code&display=swap"
      rel="stylesheet"
    />
  </head>
  <body>
    <div class="header">
      <h1>ESP32 Data Receiver</h1>
      <a href="/">Back to Home</a>
    </div>

    <div class="container">
      <div class="three-col">
        <aside class="sidebar">
          <div
            style="display: flex; justify-content: space-between; align-items: center;"
          >
            <h2>Received Uploads</h2>
            <button id="deleteAllBtn" class="del">–í–∏–¥–∞–ª–∏—Ç–∏ –≤—Å–µ</button>
          </div>
          <ul id="uploadList" class="upload-list">
            {{#if list}}
            
              {{#each list}}
                <li data-id="{{id}}" class="device-item">
                  <div class="list-row">
                    <div class="meta">
                      <strong>{{device.name}} </strong><br />
                      <small class="upload-ip">IP: {{network.ip}}</small><br />
                      <small class="upload-time">{{time}}</small>
                    </div>
                    <div class="actions">
                      <button data-id="{{id}}" class="del" onclick="event.stopPropagation()">üí• Delete</button>
                    </div>
                  </div>
                  <div class="device-tooltip" aria-hidden="false">
                    <table class="device-info">
                      <tr><th colspan="2">Device Information</th></tr>
                      <tr><td>Name:</td><td>{{device.name}}</td></tr>
                      <tr><td>Chip Model:</td><td>{{device.chipModel}}</td></tr>
                      <tr><td>CPU Freq:</td><td>{{device.cpuFreqMHz}} MHz</td></tr>
                      <tr><td>Flash Size:</td><td>{{device.flashSizeMB}} MB</td></tr>
                      <tr><td>SDK Version:</td><td>{{device.sdkVersion}}</td></tr>
                      <tr><td>MAC Address:</td><td>{{device.macAddress}}</td></tr>
                      <tr><th colspan="2">Network Information</th></tr>
                      <tr><td>SSID:</td><td>{{network.ssid}}</td></tr>
                      <tr><td>IP:</td><td>{{network.ip}}</td></tr>
                      <tr><td>RSSI:</td><td>{{network.rssi}} dBm</td></tr>
                      <tr><td>Channel:</td><td>{{network.channel}}</td></tr>
                      {{#if sensors}}
                      <tr><th colspan="2">Sensor Data</th></tr>
                      {{#if sensors.lux}}<tr><td>Light Level:</td><td>{{sensors.lux}} lux</td></tr>{{/if}}
                      {{#if sensors.temperature_aht}}<tr><td>AHT Temperature:</td><td>{{sensors.temperature_aht}}¬∞C</td></tr>{{/if}}
                      {{#if sensors.humidity_aht}}<tr><td>AHT Humidity:</td><td>{{sensors.humidity_aht}}%</td></tr>{{/if}}
                      {{#if sensors.temperature_dht}}<tr><td>DHT Temperature:</td><td>{{sensors.temperature_dht}}¬∞C</td></tr>{{/if}}
                      {{#if sensors.humidity_dht}}<tr><td>DHT Humidity:</td><td>{{sensors.humidity_dht}}%</td></tr>{{/if}}
                      {{#if sensors.battery}}<tr><td>Battery:</td><td>{{sensors.battery}}V</td></tr>{{/if}}
                      {{#if sensors.uptime}}<tr><td>Uptime:</td><td>{{sensors.uptime}}ms</td></tr>{{/if}}
                      {{/if}}
                    </table>
                  </div>
                </li>
              {{/each}}
            {{else}}
              <li>No uploads yet</li>
            {{/if}}
          </ul>
          <div class="pagination">
            <div class="pagination-controls">
              <button id="prevPage" class="pagination-btn">‚Üê Previous</button>
              <span class="page-info">Page <span id="currentPage">1</span></span>
              <button id="nextPage" class="pagination-btn">Next ‚Üí</button>
            </div>
            <div class="items-per-page">
              <label for="itemsPerPageSelect">Items per page:</label>
              <select id="itemsPerPageSelect" class="items-per-page-select">
                <option value="5" selected>5</option>
                <option value="10">10</option>
                <option value="20">20</option>
                <option value="50">50</option>
              </select>
            </div>
          </div>
        </aside>

        <main class="detail">
          <h2>Details</h2>
          <div id="detailView">
            <p>Select an upload on the left to see details.</p>
          </div>

        </main>
        <section class="chart-section">
          <h2>–ì—Ä–∞—Ñ—ñ–∫ 1</h2>
          <div id="chart">
            <!-- –ì—Ä–∞—Ñ—ñ–∫ –±—É–¥–µ —Ç—É—Ç -->
            <canvas id="uploadChart"></canvas>
          </div>
        </section>
      </div>
    </div>
{{!-- 
    <script>
      async function fetchList() { try { const res = await
      fetch('/api/uploads'); const items = await res.json(); const listEl =
      document.getElementById('uploadList'); listEl.innerHTML = ''; if (!items
      || items.length === 0) { listEl.innerHTML = '<li>No uploads yet</li>';
      return; } for (const it of items) { const li =
      document.createElement('li'); li.dataset.id = it.id; console.log(it);
      li.innerHTML = `<div class="list-row"><div class="meta"><strong>${it.id ||
      'No Summary'}</strong><br/><small>${new
      Date(it.time).toLocaleString()}</small></div><div class="actions"><button
      data-id="${it.id}" class="del">üí• Delete</button></div></div>`;
      li.addEventListener('click', () => loadDetail(it.id, li));
      li.querySelector('.del').addEventListener('click', (ev) => {
      ev.stopPropagation(); deleteItem(it.id, li); }); listEl.appendChild(li); }
      } catch (e) { console.error('Failed to fetch list', e); } } function
      jsonToTable(obj) { let table = '<table>'; for (const key in obj) { if
      (typeof obj[key] === 'object' && obj[key] !== null) { table +=
      `<tr><td><strong>${key}</strong></td><td>${jsonToTable(obj[key])}</td></tr>`;
      } else { table +=
      `<tr><td><strong>${key}</strong></td><td>${obj[key]}</td></tr>`; } } table
      += '</table>'; return table; } async function loadDetail(id, liEl) { try {
      document.querySelectorAll('#uploadList li').forEach(x =>
      x.classList.remove('active')); if (liEl) liEl.classList.add('active');
      const res = await fetch('/api/uploads/' + encodeURIComponent(id)); if
      (!res.ok) { document.getElementById('detailView').innerText = 'Failed to
      load detail: ' + res.status; return; } const obj = await res.json();
      console.log(obj); let detailHtml = '<h3>Metadata</h3>' + '<pre>' +
      jsonToTable(obj.meta) + '</pre>'; detailHtml += '<pre>' +
      jsonToTable(obj.data) + '</pre>';
      document.getElementById('detailView').innerHTML = detailHtml; } catch (e)
      { console.error('Failed to load detail', e);
      document.getElementById('detailView').innerHTML = '<p class="error">Could
      not load or parse details for this upload.</p>'; } } async function
      deleteItem(id, liEl) { if (!confirm('Are you sure you want to delete this
      upload?')) return; try { const res = await fetch('/api/uploads/' +
      encodeURIComponent(id), { method: 'DELETE' }); if (!res.ok) {
      alert('Failed to delete item.'); return; } if (liEl) liEl.remove(); const
      detailView = document.getElementById('detailView'); const activeItem =
      document.querySelector('#uploadList li.active'); if (!activeItem) {
      detailView.innerHTML = '<p>Select an upload on the left to see
      details.</p>'; } } catch (e) { console.error('Delete failed', e);
      alert('An error occurred during deletion.'); } } async function
      deleteAllItems() { if (!confirm('Are you sure you want to delete all
      uploads?')) return; try { const res = await fetch('/api/uploads', {
      method: 'DELETE' }); if (!res.ok) { alert('Failed to delete all items.');
      return; } } catch (e) { console.error('Delete all failed', e); alert('An
      error occurred during deletion.'); } }
      document.addEventListener('DOMContentLoaded', () => { fetchList();
      document.getElementById('deleteAllBtn').addEventListener('click',
      deleteAllItems); if (!!window.EventSource) { const es = new
      EventSource('/events'); es.addEventListener('new', (e) => { try { const d
      = JSON.parse(e.data); const listEl =
      document.getElementById('uploadList'); const li =
      document.createElement('li'); li.dataset.id = d.id; console.log(d);
      li.innerHTML = `<div class="list-row"><div class="meta"><strong>${d.id ||
      'No Summary'}</strong><br/><small>${new
      Date(d.time).toLocaleString()}</small></div><div class="actions"><button
      data-id="${d.id}" classc="del">Delete</button></div></div>`;
      li.addEventListener('click', () => loadDetail(d.id, li));
      li.querySelector('.del').addEventListener('click', (ev) => {
      ev.stopPropagation(); deleteItem(d.id, li); }); const noItems =
      listEl.querySelector('li'); if(noItems && noItems.innerText === 'No
      uploads yet'){ listEl.innerHTML = ''; } listEl.prepend(li); } catch (err)
      { console.error('Invalid SSE "new" data', err); } });
      es.addEventListener('deleted', (e) => { try { const d =
      JSON.parse(e.data); const el = document.querySelector(`#uploadList
      li[data-id='${d.id}']`); if (el) el.remove(); const detailView =
      document.getElementById('detailView'); const activeItem =
      document.querySelector('#uploadList li.active'); if (!activeItem) {
      detailView.innerHTML = '<p>Select an upload on the left to see
      details.</p>'; } const listEl = document.getElementById('uploadList'); if
      (listEl.children.length === 0) { listEl.innerHTML = '<li>No uploads
      yet</li>'; } } catch (err) { console.error('Invalid SSE "deleted" data',
      err); } }); es.addEventListener('deleted_all', (e) => { const listEl =
      document.getElementById('uploadList'); listEl.innerHTML = '<li>No uploads
      yet</li>'; const detailView = document.getElementById('detailView');
      detailView.innerHTML = '<p>Select an upload on the left to see
      details.</p>'; }); } });
    </script> --}}

    <script>
  // –ü—Ä–∏–º—ñ—Ç–∫–∞: —Ü–µ–π –∫–æ–¥ –ø–µ—Ä–µ–¥–±–∞—á–∞—î, —â–æ –≤ DOM —î –µ–ª–µ–º–µ–Ω—Ç–∏ –∑ id: uploadList, detailView, deleteAllBtn

  let currentPage = 1;
  let itemsPerPage = 5;
  let totalItems = 0;

  async function fetchList(page = 1, limit = itemsPerPage) {
    try {
      const res = await fetch(`/api/uploads?page=${page}&limit=${limit}`);
      if (!res.ok) throw new Error('Network response not ok: ' + res.status);
      const data = await res.json();
      const items = data.items || [];
      
      // –õ–æ–≥—É—î–º–æ –∫–æ–∂–µ–Ω –µ–ª–µ–º–µ–Ω—Ç —Å–ø–∏—Å–∫—É
      console.log('=== Page ' + page + ' items ===');
      items.forEach((item, index) => {
        console.log(`Item ${index + 1}:`, item);
      });
      console.log('=== End of page items ===');
      
      totalItems = data.pagination?.totalItems || items.length;
      
      const listEl = document.getElementById('uploadList');
      listEl.innerHTML = '';

      if (!items || items.length === 0) {
        // –°—Ç–≤–æ—Ä—é—î–º–æ –ø–æ—Ä–æ–∂–Ω—ñ –µ–ª–µ–º–µ–Ω—Ç–∏ —è–∫—â–æ –Ω–µ–º–∞—î –¥–∞–Ω–∏—Ö
        for (let i = 0; i < limit; i++) {
          const emptyLi = createEmptyListItem();
          listEl.appendChild(emptyLi);
        }
        updatePagination(page);
        return;
      }

      // –î–æ–¥–∞—î–º–æ —Ä–µ–∞–ª—å–Ω—ñ –µ–ª–µ–º–µ–Ω—Ç–∏
      for (const it of items) {
        const li = createListItem(it);
        listEl.appendChild(li);
      }

      // –î–æ–¥–∞—î–º–æ –ø–æ—Ä–æ–∂–Ω—ñ –µ–ª–µ–º–µ–Ω—Ç–∏, —è–∫—â–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ –∑–∞–ø–æ–≤–Ω–∏—Ç–∏ —Å—Ç–æ—Ä—ñ–Ω–∫—É
      const remainingSlots = limit - items.length;
      if (remainingSlots > 0) {
        for (let i = 0; i < remainingSlots; i++) {
          const emptyLi = createEmptyListItem();
          listEl.appendChild(emptyLi);
        }
      }

      updatePagination(page);
    } catch (e) {
      console.error('Failed to fetch list', e);
      const listEl = document.getElementById('uploadList');
      if (listEl) listEl.innerHTML = '<li class="error">Failed to load uploads</li>';
    }
  }

  function updatePagination(page) {
    currentPage = page;
    const totalPages = Math.ceil(totalItems / itemsPerPage);
    
    const prevBtn = document.getElementById('prevPage');
    const nextBtn = document.getElementById('nextPage');
    const pageSpan = document.getElementById('currentPage');
    
    if (prevBtn) prevBtn.disabled = page <= 1;
    if (nextBtn) nextBtn.disabled = page >= totalPages;
    if (pageSpan) pageSpan.textContent = `${page} of ${totalPages}`;
  }

  // –°—Ç–≤–æ—Ä—é—î <li> –¥–ª—è –∑–∞–ø–∏—Å—É (—â–æ–± –Ω–µ –¥—É–±–ª—é–≤–∞—Ç–∏ –∫–æ–¥ –ø—Ä–∏ SSE)
  function createListItem(it) {
    const li = document.createElement('li');
    li.dataset.id = it.id ?? '';
    
    // Get the device info from the data structure
    const deviceName = it.device.name || (it.summary || 'Unknown Device');
    const chipModel = it.device?.chipModel || 'Unknown Model';
    const ip = it.network?.ip || 'No IP';
    
    // Log the item structure to help debug
    console.log('Item structure:', {
      id: it.id,
      summary: it.summary,
      device: it.device,
      network: it.network,
      time: it.time
    });
    
    li.innerHTML = `
      <div class="list-row">
        <div class="meta">
          <strong class="device-name">${escapeHtml(deviceName)} ${deviceName !== '‚ö†Ô∏è Unnamed Device' ? `- ${escapeHtml(chipModel)}` : ''}</strong><br/>
          <small class="device-ip">üìç ${escapeHtml(ip)}</small><br/>
          <small class="upload-time">üïí ${new Date(it.time).toLocaleString()}</small>
          <div class="sensor-preview">
            <small class="sensor ${!it.sensors?.temperature_aht ? 'empty' : ''}">
              üå°Ô∏è ${it.sensors.temperature_aht}
            </small>
            <small class="sensor ${!it.sensors?.humidity_aht ? 'empty' : ''}">
              üíß ${it.sensors?.humidity_aht !== null ? `${it.sensors.humidity_aht}%` : 'null'}
            </small>
            <small class="sensor ${!it.sensors?.lux ? 'empty' : ''}">
              ‚òÄÔ∏è ${it.sensors?.lux !== null ? `${it.sensors.lux} lux` : 'null'}
            </small>
          </div>
        </div>
        <div class="actions">
          <button data-id="${escapeHtml(it.id ?? '')}" class="del">ÔøΩÔ∏è Delete</button>
        </div>
      </div>
    `;

    // –∫–ª—ñ–∫ –ø–æ –µ–ª–µ–º–µ–Ω—Ç—É ‚Äî –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –¥–µ—Ç–∞–ª—ñ
  // click still loads full detail in the right pane
  li.addEventListener('click', () => loadDetail(it.id, li));

    // –∫–Ω–æ–ø–∫–∞ –≤–∏–¥–∞–ª–µ–Ω–Ω—è ‚Äî stopPropagation, —â–æ–± –Ω–µ —Å–ø—Ä–∞—Ü—å–æ–≤—É–≤–∞–≤ li click
    const delBtn = li.querySelector('.del');
    if (delBtn) {
      delBtn.addEventListener('click', (ev) => {
        ev.stopPropagation();
        deleteItem(it.id, li);
      });
    }

    // Tooltip element (hidden by default via CSS)
    const tooltip = document.createElement('div');
    tooltip.className = 'device-tooltip';
    tooltip.innerHTML = `
      <table class="device-info">
        <tr><th colspan="2">Device Information</th></tr>
        <tr><td>Name:</td><td>${escapeHtml(it.device?.name ?? '‚ö†Ô∏è Unnamed Device')}</td></tr>
        <tr><td>Chip Model:</td><td>${escapeHtml(it.device?.chipModel ?? '‚ùì Unknown Model')}</td></tr>
        <tr><td>CPU Freq:</td><td>${it.device?.cpuFreqMHz ? escapeHtml(it.device.cpuFreqMHz) + ' MHz' : 'üìä N/A'}</td></tr>
        <tr><td>Flash Size:</td><td>${it.device?.flashSizeMB ? escapeHtml(it.device.flashSizeMB) + ' MB' : 'üíæ N/A'}</td></tr>
        <tr><td>SDK Version:</td><td>${escapeHtml(it.device?.sdkVersion ?? 'üîÑ Unknown Version')}</td></tr>
        <tr><td>MAC:</td><td>${escapeHtml(it.device?.macAddress ?? 'üîí No MAC Address')}</td></tr>
        <tr><th colspan="2">Network</th></tr>
        <tr><td>SSID:</td><td>${escapeHtml(it.network?.ssid ?? 'üì° Not Connected')}</td></tr>
        <tr><td>IP:</td><td>${escapeHtml(it.network?.ip ?? 'üîå No IP Address')}</td></tr>
        <tr><td>RSSI:</td><td>${it.network?.rssi ? escapeHtml(it.network.rssi) + ' dBm' : 'üì∂ No Signal'}</td></tr>
        <tr><th colspan="2">Sensor Data</th></tr>
        <tr><td>Light:</td><td>‚òÄÔ∏è ${it.sensors?.lux !== null ? `${escapeHtml(it.sensors.lux)} lux` : '<span class="no-data">No data</span>'}</td></tr>
        <tr><td>AHT Temp:</td><td>üå°Ô∏è ${it.sensors?.temperature_aht !== null ? `${escapeHtml(it.sensors.temperature_aht)}¬∞C` : '<span class="no-data">No data</span>'}</td></tr>
        <tr><td>AHT Humidity:</td><td>üíß ${it.sensors?.humidity_aht !== null ? `${escapeHtml(it.sensors.humidity_aht)}%` : '<span class="no-data">No data</span>'}</td></tr>
        <tr><td>DHT Temp:</td><td>üå°Ô∏è ${it.sensors?.temperature_dht !== null ? `${escapeHtml(it.sensors.temperature_dht)}¬∞C` : '<span class="no-data">No data</span>'}</td></tr>
        <tr><td>DHT Humidity:</td><td>üíß ${it.sensors?.humidity_dht !== null ? `${escapeHtml(it.sensors.humidity_dht)}%` : '<span class="no-data">No data</span>'}</td></tr>
        <tr><td>Uptime:</td><td>‚è±Ô∏è ${it.sensors?.uptime !== null ? `${escapeHtml(it.sensors.uptime)}ms` : '<span class="no-data">No data</span>'}</td></tr>
      </table>
    `;

    // show tooltip on hover
    li.addEventListener('mouseenter', (ev) => {
      // position the tooltip relative to li
      li.appendChild(tooltip);
      tooltip.setAttribute('aria-hidden', 'false');
    });
    li.addEventListener('mouseleave', (ev) => {
      tooltip.setAttribute('aria-hidden', 'true');
      if (tooltip.parentElement === li) li.removeChild(tooltip);
    });

    return li;
  }

  // –°—Ç–≤–æ—Ä—é—î –ø–æ—Ä–æ–∂–Ω—ñ–π –µ–ª–µ–º–µ–Ω—Ç —Å–ø–∏—Å–∫—É –¥–ª—è –∑–∞–ø–æ–≤–Ω–µ–Ω–Ω—è –ø—Ä–æ—Å—Ç–æ—Ä—É
  function createEmptyListItem() {
    const li = document.createElement('li');
    li.className = 'empty';
    li.innerHTML = `
      <div class="list-row">
        <div class="meta">
          <strong class="device-name empty-text">Device Name</strong><br/>
          <small class="device-ip empty-text">üìç IP Address</small><br/>
          <small class="upload-time empty-text">üïí Time</small>
          <div class="sensor-preview">
            <small class="sensor empty">
              üå°Ô∏è --¬∞C
            </small>
            <small class="sensor empty">
              üíß --%
            </small>
            <small class="sensor empty">
              ‚òÄÔ∏è -- lux
            </small>
          </div>
        </div>
        <div class="actions">
          <button class="del" disabled style="opacity: 0.3">üóëÔ∏è Delete</button>
        </div>
      </div>
    `;
    return li;
  }

  // –ü—Ä–æ—Å—Ç–∞ —Ñ—É–Ω–∫—Ü—ñ—è-–µ–∫—Å–∫–µ–π–ø–µ—Ä –¥–ª—è –±–µ–∑–ø–µ—á–Ω–æ—ó –≤—Å—Ç–∞–≤–∫–∏ id/text —É HTML-—à–∞–±–ª–æ–Ω
  function escapeHtml(str) {
    return String(str)
      .replace(/&/g, "&amp;")
      .replace(/</g, "&lt;")
      .replace(/>/g, "&gt;")
      .replace(/"/g, "&quot;")
      .replace(/'/g, "&#039;");
  }

  // –†–µ–∫—É—Ä—Å–∏–≤–Ω–µ –ø–µ—Ä–µ—Ç–≤–æ—Ä–µ–Ω–Ω—è –æ–±'—î–∫—Ç–∞/–º–∞—Å–∏–≤—É –≤ HTML-—Ç–∞–±–ª–∏—Ü—é
  function jsonToTable(obj) {
    if (obj === null) return '<em>null</em>';
    if (typeof obj !== 'object') return escapeHtml(String(obj));

    let table = '<table>';
    if (Array.isArray(obj)) {
      // –º–∞—Å–∏–≤ ‚Äî –∫–æ–∂–µ–Ω –µ–ª–µ–º–µ–Ω—Ç –≤ –æ–∫—Ä–µ–º–æ–º—É —Ä—è–¥–∫—É
      obj.forEach((val, i) => {
        table += `<tr><td><strong>[${i}]</strong></td><td>${jsonToTable(val)}</td></tr>`;
      });
    } else {
      for (const key of Object.keys(obj)) {
        const val = obj[key];
        table += `<tr><td><strong>${escapeHtml(key)}</strong></td><td>${jsonToTable(val)}</td></tr>`;
      }
    }
    table += '</table>';
    return table;
  }

  async function loadDetail(id, liEl) {
    try {
      document.querySelectorAll('#uploadList li').forEach(x => x.classList.remove('active'));
      if (liEl) liEl.classList.add('active');

      const res = await fetch('/api/uploads/' + encodeURIComponent(id));
      if (!res.ok) {
        document.getElementById('detailView').innerText = 'Failed to load detail: ' + res.status;
        return;
      }

      const obj = await res.json();
      // –ø–æ–±—É–¥–æ–≤–∞ –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –ø–µ—Ä–µ–≥–ª—è–¥—É: –º–µ—Ç–∞–¥–∞–Ω—ñ + –¥–∞–Ω—ñ
      let detailHtml = '<h3>Metadata</h3>' + jsonToTable(obj.meta ?? {});
      detailHtml += '<h3>Data</h3>' + jsonToTable(obj.data ?? {});
      document.getElementById('detailView').innerHTML = detailHtml;
    } catch (e) {
      console.error('Failed to load detail', e);
      document.getElementById('detailView').innerHTML = '<p class="error">Could not load or parse details for this upload.</p>';
    }
  }

  async function deleteItem(id, liEl) {
    if (!confirm('Are you sure you want to delete this upload?')) return;
    try {
      const res = await fetch('/api/uploads/' + encodeURIComponent(id), { method: 'DELETE' });
      if (!res.ok) {
        alert('Failed to delete item. Server responded: ' + res.status);
        return;
      }
      // –ø—Ä–∏–±—Ä–∞—Ç–∏ –∑—ñ —Å–ø–∏—Å–∫—É —ñ –æ—á–∏—Å—Ç–∏—Ç–∏ –¥–µ—Ç–∞–ª—å–Ω–∏–π –ø–µ—Ä–µ–≥–ª—è–¥, —è–∫—â–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ
      if (liEl) liEl.remove();
      const activeItem = document.querySelector('#uploadList li.active');
      const detailView = document.getElementById('detailView');
      if (!activeItem && detailView) {
        detailView.innerHTML = '<p>Select an upload on the left to see details.</p>';
      }
      // –Ø–∫—â–æ —Å–ø–∏—Å–æ–∫ –ø–æ—Ä–æ–∂–Ω—ñ–π ‚Äî –ø–æ–∫–∞–∑–∞—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
      const listEl = document.getElementById('uploadList');
      if (listEl && listEl.children.length === 0) listEl.innerHTML = '<li>No uploads yet</li>';
    } catch (e) {
      console.error('Delete failed', e);
      alert('An error occurred during deletion.');
    }
  }

  async function deleteAllItems() {
    if (!confirm('Are you sure you want to delete all uploads?')) return;
    try {
      const res = await fetch('/api/uploads', { method: 'DELETE' });
      if (!res.ok) {
        alert('Failed to delete all items. Server responded: ' + res.status);
        return;
      }
      // –æ—á–∏—Å—Ç–∏—Ç–∏ UI
      const listEl = document.getElementById('uploadList');
      if (listEl) listEl.innerHTML = '<li>No uploads yet</li>';
      const detailView = document.getElementById('detailView');
      if (detailView) detailView.innerHTML = '<p>Select an upload on the left to see details.</p>';
    } catch (e) {
      console.error('Delete all failed', e);
      alert('An error occurred during deletion.');
    }
  }

  document.addEventListener('DOMContentLoaded', () => {
    // Set up items per page first
    const itemsPerPageSelect = document.getElementById('itemsPerPageSelect');
    if (itemsPerPageSelect) {
      // Make sure the select matches our initial value
      itemsPerPageSelect.value = itemsPerPage.toString();
      itemsPerPageSelect.addEventListener('change', (e) => {
        itemsPerPage = parseInt(e.target.value, 10);
        // Reset to first page when changing items per page
        currentPage = 1;
        fetchList(1, itemsPerPage);
      });
    }

    // Initial load of first page with default items per page
    fetchList(1, itemsPerPage);

    // Set up pagination handlers
    const prevBtn = document.getElementById('prevPage');
    const nextBtn = document.getElementById('nextPage');

    if (prevBtn) {
      prevBtn.addEventListener('click', () => {
        if (currentPage > 1) {
          fetchList(currentPage - 1);
        }
      });
    }

    if (nextBtn) {
      nextBtn.addEventListener('click', () => {
        const totalPages = Math.ceil(totalItems / itemsPerPage);
        if (currentPage < totalPages) {
          fetchList(currentPage + 1);
        }
      });
    }

    const deleteAllBtn = document.getElementById('deleteAllBtn');
    if (deleteAllBtn) deleteAllBtn.addEventListener('click', deleteAllItems);

    // delegated hover handlers so server-rendered <li> items also show tooltip
    const uploadList = document.getElementById('uploadList');
    if (uploadList) {
      uploadList.addEventListener('mouseover', (ev) => {
        const li = ev.target.closest && ev.target.closest('li.device-item');
        if (!li) return;
        const tt = li.querySelector('.device-tooltip');
        if (tt) tt.setAttribute('aria-hidden', 'false');
      });
      uploadList.addEventListener('mouseout', (ev) => {
        const li = ev.target.closest && ev.target.closest('li.device-item');
        if (!li) return;
        const tt = li.querySelector('.device-tooltip');
        if (tt) tt.setAttribute('aria-hidden', 'true');
      });
    }

    if (!!window.EventSource) {
      const es = new EventSource('/events');

      es.addEventListener('new', (e) => {
        try {
          const d = JSON.parse(e.data);
          console.log('New item received via SSE:', d);
          
          // If we're on page 1, add the new item and remove excess items
          if (currentPage === 1) {
            const listEl = document.getElementById('uploadList');
            
            // Clear "No uploads" message if present
            const first = listEl.querySelector('li');
            if (first && first.textContent.trim() === 'No uploads yet') {
              listEl.innerHTML = '';
            }
            
            // Add new item at the top
            const li = createListItem(d);
            listEl.prepend(li);
            
            // Remove excess items if we're over the per-page limit
            const items = listEl.querySelectorAll('li');
            if (items.length > itemsPerPage) {
              items[items.length - 1].remove();
            }
            
            // Update total count and pagination
            totalItems++;
            updatePagination(currentPage);
          } else {
            // If we're not on page 1, increment the total but don't modify the list
            totalItems++;
            updatePagination(currentPage);
          }
        } catch (err) {
          console.error('Invalid SSE "new" data', err);
        }
      });

      es.addEventListener('deleted', (e) => {
        try {
          const d = JSON.parse(e.data);
          const el = document.querySelector(`#uploadList li[data-id="${CSS.escape ? CSS.escape(d.id) : d.id}"]`);
          if (el) el.remove();

          const detailView = document.getElementById('detailView');
          const activeItem = document.querySelector('#uploadList li.active');
          if (!activeItem && detailView) {
            detailView.innerHTML = '<p>Select an upload on the left to see details.</p>';
          }

          const listEl = document.getElementById('uploadList');
          if (listEl && listEl.children.length === 0) {
            listEl.innerHTML = '<li>No uploads yet</li>';
          }
        } catch (err) {
          console.error('Invalid SSE "deleted" data', err);
        }
      });

      // hover-based tooltips are used instead of click toggles

      es.addEventListener('deleted_all', (e) => {
        try {
          const listEl = document.getElementById('uploadList');
          if (listEl) listEl.innerHTML = '<li>No uploads yet</li>';
          const detailView = document.getElementById('detailView');
          if (detailView) detailView.innerHTML = '<p>Select an upload on the left to see details.</p>';
        } catch (err) {
          console.error('Invalid SSE "deleted_all" data', err);
        }
      });

      es.onerror = (err) => {
        console.warn('SSE connection error', err);
        // –Ω–µ –∑–∞–∫—Ä–∏–≤–∞—î–º–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ, –±—Ä–∞—É–∑–µ—Ä —Å–ø—Ä–æ–±—É—î –ø–µ—Ä–µ–ø—ñ–¥–∫–ª—é—á–∏—Ç–∏—Å—å
      };
    }
  });
</script>

  </body>
</html>